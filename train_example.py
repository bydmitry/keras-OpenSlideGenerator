'''Train a simple deep CNN on the polygonal annotated slides using OpenSlideGenerator.
'''

from __future__ import print_function
import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
import os
import math

import openslide_generator

# create generator instance
gen_train = openslide_generator.OpenSlideGenerator(
        './train.txt', './test_slides', 512, 256, blur=10, he_augmentation=True)
gen_val = openslide_generator.OpenSlideGenerator(
        './val.txt', './test_slides', 512, 256)

gen_train.fetch_mode = 'label-slide'

batch_size = 50
num_classes = len(gen_train.labels)
epochs = 1
data_augmentation = True
num_predictions = 20
save_dir = os.path.join(os.getcwd(), 'saved_models')
model_name = 'keras_openslide_trained_model.h5'

# model construction
model = Sequential()
model.add(Conv2D(32, (3, 3), padding='same',
                 input_shape=gen_train.shape()))
model.add(Activation('relu'))
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3, 3), padding='same'))
model.add(Activation('relu'))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes))
model.add(Activation('softmax'))

# initiate RMSprop optimizer
opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)

# Let's train the model using RMSprop
model.compile(loss='categorical_crossentropy',
              optimizer=opt,
              metrics=['accuracy'])

# Fit the model on the batches generated by datagen.flow().
model.fit_generator(gen_train.flow(batch_size=batch_size),
                    steps_per_epoch=math.ceil(gen_train.patch_per_epoch/batch_size),
                    epochs=epochs,
                    validation_data=gen_val.flow(batch_size=batch_size),
                    validation_steps=math.ceil(gen_val.patch_per_epoch/batch_size),
                    workers=1)

# Save model and weights
if not os.path.isdir(save_dir):
    os.makedirs(save_dir)
model_path = os.path.join(save_dir, model_name)
model.save(model_path)
print('Saved trained model at %s ' % model_path)

